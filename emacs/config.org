#+Author: Caleb Smith
#+Date: 2022
The elisp in this org file is extracted into config.el and run at
startup by init.el
* Configuration for built-in packages

** Defaults
#+BEGIN_SRC emacs-lisp
  ;; Turn off the annoying modes and behaviors
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (setq
   inhibit-startup-screen t
   inhibit-startup-message t
   initial-scratch-message ""
   inhibit-startup-echo-area-message t
   show-help-function nil
   visible-bell -1
   ring-bell-function 'ignore
   frame-resize-pixelwise t
   default-directory "~/")

  ;; Tabs
  (setq-default
   indent-tabs-mode nil
   tab-width 2
   standard-indent 2)
  (setq tab-stop-list '(2 4))

  ;; better scrolling experience
  (setq
   scroll-margin 0
   scroll-conservatively 101 ; > 100
   scroll-preserve-screen-position t
   auto-window-vscroll nil)
#+END_SRC

** file backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves"))
        auto-save-visited-file-name t
        auto-save-visited-mode t

        make-backup-files nil)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp

  (setq-default display-line-numbers-type 'relative
                line-spacing 3
                linum-format "%3d "
                linum-relative-current-symbol "")

  (global-display-line-numbers-mode)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  cider-repl-mode-hook
                  neotree-mode-hook
                  xref-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC

** Modernize selection behavior
Replace the active region just by typing text, just like modern editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes file content and version control status every 2 seconds
#+BEGIN_SRC emacs-lisp
    (use-package autorevert
      :ensure nil
      :config (global-auto-revert-mode 1)
      (revert-buffer t t)

      (setq auto-revert-interval 2
            auto-revert-check-vc-info t
            auto-revert-verbose nil
            revert-without-query '(".*")))
#+END_SRC

** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC

** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
     (use-package paren
       :ensure nil
       :init (setq show-paren-delay 0)
       :config
    (show-paren-mode +1))

#+END_SRC
** Setting up some frame defaults
Set the font size.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :preface
    (defun csmith/set-default-font ()
      (interactive)
      (when (member "Consolas" (font-family-list))
        (set-face-attribute 'default nil :family "Consolas"))
      (set-face-attribute 'default nil
                          :height 180
                          :weight 'normal))
    :ensure nil
    :config (csmith/set-default-font))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs
versions. No longer need an extra package for this. It also takes care
of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t))
#+end_src
** Allow local-variables
#+begin_src emacs-lisp
(setq enable-local-variables :all)
#+end_src

* Third-party packages
Add Packages below
** Leader keys
General provides useful binding utilities
#+BEGIN_SRC emacs-lisp
  (use-package general
    :straight t
    :demand t
    :after evil)

#+End_SRC

*** Create general definers for bindings
#+BEGIN_SRC emacs-lisp
    (defvar leader-states
      '(emacs hybrid normal visual motion operator outer inner)
      "all the emacs evil states for binding leader keys")

    (general-create-definer leader-def+
      :states leader-states
      :non-normal-prefix "S-SPC"
      :keymaps 'override
      :prefix "SPC")

    (general-create-definer local-leader-def+
      :states leader-states
      :prefix ",")

    (defmacro leader-submenu-def+ (name infix-key &rest body)
      "Create a definer named leader-def-submenu with corresponding keymap suffixed by -map that wraps leader-def.
         Prefix bindings in BODY with INFIX-KEY."
      `(progn
         (general-create-definer ,(intern (concat "leader-submenu-" name "+"))
           :wrapping leader-def+
           :prefix-map (quote ,(intern (concat "leader-submenu-" name "-map")))
           :infix ,infix-key
           ;;:wk-full-keys nil
           "" '(:ignore t :which-key ,name))
         (,(intern (concat "leader-submenu-" name "+"))
          ,@body)))

#+END_SRC

** GUI enhancements
*** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+END_SRC
*** Themes
#+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :init (load-theme 'doom-molokai t)
      :config
      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)
      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config)
      (set-background-color "black"))
#+END_SRC

*** mode line
#+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
      :config (setq doom-modeline-buffer-encoding nil
  doom-modeline-buffer-file-name-style 'relative-from-project
  )
      :init (doom-modeline-mode 1))

#+END_SRC

*** Window popups
#+BEGIN_SRC emacs-lisp
    (use-package popwin
  :config (popwin-mode 1))
#+END_SRC

*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :after  (evil evil-collection)
    :hook ((after-init . dashboard-refresh-buffer))
    :config (setq dashboard-startup-banner 'logo
                  dashboard-set-heading-icons t
                  dashboard-set-file-icons t
                  dashboard-banner-logo-title "Smithmacs")

    (evil-collection-define-key '(normal visual) 'dashboard-mode-map
      (kbd "RET") 'dashboard-return)

    (dashboard-setup-startup-hook))

#+END_SRC

*** Completions

#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :after lsp
    :defer 3
    :diminish company-mode global-company-mode
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :config (global-company-mode +1)
    :custom
    (company-tooltip-idle-delay nil "Show the completion tooltip without any delay.")
    (company-idle-delay 0.15)
    (company-selection-wrap-around t)
    (company-minimum-prefix-length 2)
    (company-statistics-file (state! "company/statistics.el"))
    (company-tooltip-align-annotations t)
    (company-require-match nil)
    (company-tooltip-limit 10)
    (company-tooltip-width-grow-only nil)
    (company-format-margin-function #'company-text-icons-margin)
    (company-text-icons-add-background t))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package yasnippet
    :bind (:map yas-minor-mode-map
                ("TAB" . nil)
                ("<tab>" . nil))
    :config
    (yas-global-mode))

#+END_SRC

#+RESULTS:

*** Selections
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :straight t
    :diminish
    :config (progn
              (setq
               helm-quick-update t ; do not display invisible candidates
               helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
               helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
               helm-split-window-default-side 'other ;; open helm buffer in another window
               helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
               helm-candidate-number-limit 200 ; limit the number of displayed canidates
               helm-move-to-line-cycle-in-source nil ; move to end or beginning of source when reaching top or bottom of source.
               ;; helm-command
               helm-M-x-requires-pattern 0     ; show all candidates when set to 0
               )
              (helm-mode +1))

    (bind-keys
     :map helm-find-files-map
     ("<tab>"         . helm-execute-persistent-action)
     ("<S-tab>"         . helm-select-action)
     ("C-<backspace>" . helm-find-files-up-one-level)
     :map helm-read-file-map
     ("<tab>"         . helm-execute-persistent-action)
     ("<S-tab>"         . helm-select-action))

    :general (leader-submenu-def+ "search" "s"
               "f"  'helm-find-files
               "/" 'helm-ag
               "b"  'helm-mini
               "o"  'helm-occur
               "k"  'helm-show-kill-ring
               "m"  'helm-filtered-bookmarks
               ))

  ;; investigate
  ;;      (use-package helm-eshell :defer t)
  ;;TODO Add helm-eshell-history to eshell ;;(define-key eshell-mode-map (kbd "M-r")  'helm-eshell-history)

  (use-package helm-ag :defer t)

  (use-package helm-lsp
    :after lsp
    :commands helm-lsp-workspace-symbol)
#+END_SRC

*** rainbow-delimiters
pretty rainbows for lisp
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode)
    :commands rainbow-delimiters-mode)
#+END_SRC

*** treesitter
#+BEGIN_SRC emacs-lisp
   (use-package tree-sitter
     :hook ((rustic-mode python-mode
                         json-mode
                         js-mode
                         js2-mode
                         ;;typescript-mode
                         sh-mode) . tree-sitter-mode)

     :config (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

   (use-package tree-sitter-langs
     :ensure t
     :after tree-sitter
     :config
     (tree-sitter-require 'rust)
     (tree-sitter-require 'go)
     (tree-sitter-require 'typescript))
#+END_SRC

** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp

  (use-package git-link)

  (use-package magit
    :straight t
    :bind ("C-x g" . magit-status)
    :config
    (add-hook 'with-editor-mode-hook #'evil-insert-state)
    (setq magit-auto-revert-immediately t
          vc-handled-backends nil)
    (magit-auto-revert-mode)
    :general (leader-submenu-def+ "git" "g"
               "v" 'magit-status
               "b" 'magit-blame
               "l" 'git-link)
    )
  #+END_SRC



** eshell
#+BEGIN_SRC emacs-lisp
  (setq eshell-cmpl-cycle-completions nil)
  (add-hook
   'eshell-mode-hook
   (lambda ()
     (setq-local pcomplete-cycle-completions nil)))
#+END_SRC

** Structural editing
*** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :straight t
    :ensure t
    :hook ((emacs-lisp-mode . enable-paredit-mode)
           (eval-expression-minibuffer-setup . enable-paredit-mode)
           (ielm-mode . enable-paredit-mode)
           (lisp-mode . enable-paredit-mode)
           (lisp-interaction-mode . enable-paredit-mode)
           (scheme-mode . enable-paredit-mode)
           (slime-repl-mode . enable-paredit-mode)
           (clojure-mode . enable-paredit-mode)
           (clojurescript-mode . enable-paredit-mode)
           (clojurec-mode . enable-paredit-mode)
           (cider-repl-mode . enable-paredit-mode)
           (cider-mode . enable-paredit-mode))

    :bind (
           ("M-[" . paredit-wrap-square)
           ("M-{" . paredit-wrap-curly)
           ("M-'" . paredit-meta-doublequote)
           ("M-c" . paredit-convolute-sexp)
           ;; Not from paredit but related functionality
           ("M-t" . transpose-sexps)
           )

    )

#+END_SRC


*** evil-cleverparens
#+BEGIN_SRC emacs-lisp
  (use-package evil-cleverparens
    :straight t
    :after paredit
    :init (add-hook 'paredit-mode-hook #'evil-cleverparens-mode))

#+END_SRC


** Vi keybindings
Vi bindings are efficient and friendly on the hands.
Changed the default ~:q~ and ~:wq~ to be killing current buffer, instead of killing the frame or subsequently killing Emacs.
Makes RETURN in normal mode save the file
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-undo-system 'undo-redo
          evil-shift-width 2)
    :hook (after-init . evil-mode)
    :preface
    (defun save-and-kill-this-buffer+ ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    :config
    (evil-ex-define-cmd "q" #'kill-this-buffer)
    (evil-ex-define-cmd "wq" #'save-and-kill-this-buffer+)
    (defalias #'forward-evil-word #'forward-evil-symbol)
    ;; make evil-search-word look for symbol rather than word boundaries
    (setq-default evil-symbol-word-search t)
    )
#+END_SRC


Evil-collection covers more parts of Emacs that the original Evil
doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :straight t
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :init (evil-collection-init
           '(ag bookmark calendar comint company compile dashboard dired eldoc elisp-mode eshell flycheck helm ibuffer imenu info magit markdown-mode neotree org popup which-key xref yaml-mode)))
#+END_SRC

** Utilities
*** File browser
  Neotree for file browsing
  #+BEGIN_SRC emacs-lisp
        (use-package neotree
          :straight t
          :defer 3
          :commands neotree-toggle
          :custom (neo-display-action '((display-buffer-reuse-window
                                         display-buffer-in-side-window)
                                        (side . left)
                                        (body-function . nil)
                                        (window-parameters (mode-line-format . none)))
                                      "Remove the mode-line format and prevent auto-selection.")
          :config (setq neo-window-fixed-size nil
                        neo-theme (if (display-graphic-p) 'icons 'classic)
                        neo-smart-open t)

          :general (local-leader-def+
                     :major-modes 'neotree-mode
                     :keymaps 'neotree-mode-map
                     "RET" 'neotree-quick-look
                     "o" 'neotree-open-file-in-system-application
                     "." 'neotree-hidden-file-toggle
                     "l" 'neotree-stretch-toggle
                     "z" 'neotree-collapse-all
                     "c" 'neotree-change-root))
       #+END_SRC

*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the
modeline. It provides the ~:diminish~ keyword to use-package
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Buffers
Commands to switch to various buffers.
#+begin_src emacs-lisp
  (defun switch-to-messages-buffer+ ()
    "Switches to messages buffer."
    (interactive)
    (switch-to-buffer (messages-buffer)))

  (defun switch-to-last-buffer+ (&optional buffer)
    (interactive)
    (switch-to-buffer buffer))
#+end_src
*** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode +1))
#+END_SRC
*** Project
Manages per project configuration and integrations like search
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :defer 5
    :diminish

    ;; FIXME: REMOVE
    :bind-keymap ("C-c p" . projectile-command-map)
    :config (projectile-mode +1)
    :init (advice-add 'delete-buffer-file :after
                      (defun projectile-invalidate-cache-on-file-delete+ (&rest _)
                        (when (projectile-project-p)
                          (call-interactively 'projectile-invalidate-cache))))

    :general (leader-submenu-def+ "project" "p"
             "TAB" 'projectile-find-other-file
             "RET" 'projectile-toggle-between-implementation-and-test

             "d" 'projectile-find-dir
             "r" 'projectile-recentf
             "f" 'projectile-find-file-dwim
             "F" 'projectile-find-file-in-known-projects                                  ; find-file across all known projects.
             "/" 'projectile-ag

             "b" 'projectile-ibuffer                                                      ; Open an ibuffer session with all open project buffers.
             "p" 'projectile-previous-project-buffer
             "n" 'projectile-next-project-buffer
             )
    )

#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :straight t
    :init (which-key-mode)
    :config
    (setq
     which-key-idle-delay 0.4
     which-key-idle-secondary-delay 0.4
     which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL")
     which-key-show-prefix 'left)
    (which-key-setup-minibuffer))

#+END_SRC

*** LSP
#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :straight t
      :after evil
      :init (setq lsp-keymap-prefix "C-c l"
                  lsp-enable-file-watchers nil)
      :hook ((clojure-mode clojurec-mode clojurescript-mode typescript-mode python-mode go-mode) . lsp-deferred)
      :commands (lsp lsp-mode lsp-deferred)
      :config (setq indent-region-function nil
                    lsp-lens-enabled nil
                    lsp-enable-indentation nil
                    lsp-enable-snippet nil
                    lsp-enable-on-type-formatting nil
                    lsp-prefer-flymake nil
                    lsp-modeline-code-actions-enable nil
                    lsp-ui-peek-always-show t)
      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)

    :general (local-leader-def+
                :major-modes 'lsp-mode
                :keymaps 'lsp-mode-map
                "rr" 'lsp-rename
                "gd" 'lsp-ui-peek-find-definitions
                "gr" 'lsp-ui-peek-find-references
                "gh" 'lsp-ui-doc-show))

    (use-package lsp-ui :commands lsp-ui-mode)
#+END_SRC

*** Indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :straight t
    :init (aggressive-indent-global-mode))
#+END_SRC

** Programming language support and utilities
*** Makefile
#+BEGIN_SRC emacs-lisp
  (use-package makefile-executor
    :config (add-hook 'makefile-mode-hook 'makefile-executor-mode))

#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))

#+END_SRC

*** Misc modes
#+BEGIN_SRC emacs-lisp

         (use-package yaml-mode
           :mode "\\.ya*ml$")

         (use-package graphql-mode
           :mode "\\.gql$")

         (use-package dotenv-mode
           :mode "\\.env")

         (use-package dockerfile-mode)
#+END_SRC

*** Web modes
#+BEGIN_SRC emacs-lisp

  (use-package css-mode
    :init (setq-default css-indent-offset 2))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.jsx?\\'"  . web-mode))
    :config (setq
             ;;js-indent-level 2
             web-mode-enable-auto-pairing t
             web-mode-enable-css-colorization t
             web-mode-enable-comment-interpolation t
             web-mode-enable-block-face t
             web-mode-style-padding 2
             web-mode-script-padding 2
             web-mode-markup-indent-offset 2
             web-mode-css-indent-offset 2
             web-mode-attr-indent-offset 2
             web-mode-code-indent-offset 2
             web-mode-enable-auto-indentation nil
             web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))

  (use-package json-mode
    :interpreter "node"
    :mode (("\\.json$" . json-mode)))

#+END_SRC

*** TypeScript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :defer t
    :after (flycheck tree-sitter)
    :config
    (setq typescript-indent-level 2)
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-mode)))
           #+END_SRC

*** Python

#+BEGIN_SRC emacs-lisp
  (use-package python-mode)

  (use-package elpy
    :defer t
    :init (advice-add 'python-mode :before 'elpy-enable)
    :config (when (load "flycheck" t t)
              (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
              (add-hook 'elpy-mode-hook 'flycheck-mode)
              (add-hook 'elpy-mode-hook (lambda ()
                                          (add-hook 'before-save-hook
                                                    'elpy-format-code nil t)))))
    #+END_SRC

*** Golang

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    :config (defun my-go-mode-setup ()
              "Basic Go mode setup."
              (add-hook 'before-save-hook #'lsp-organize-imports t t))
    (add-hook 'go-mode-hook #'my-go-mode-setup))

#+END_SRC

*** Lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode)
#+END_SRC
*** Terraform
#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :straight t
    :custom (terraform-indent-level 2)
    :config
    (defun my-terraform-mode-init ()
      (outline-minor-mode 1))
    (add-hook 'terraform-mode-hook 'my-terraform-mode-init))
#+END_SRC


*** Clojure
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clj-kondo)

  (use-package clojure-mode
    :straight t
    :mode (("\\.edn$" . clojure-mode))
    :preface (defun toggle-nrepl-buffer ()
               "Toggle the nREPL REPL on and off"
               (interactive)
               (if (string-match "cider-repl" (buffer-name (current-buffer)))
                   (delete-window)
                 (cider-switch-to-repl-buffer)))
    :config
    (require 'flycheck-clj-kondo)

    (setq clojure-indent-style 'align-arguments
          cider-save-file-on-load t)

    (add-hook 'cider-stacktrace-mode-hook
              (lambda ()
                (set (make-local-variable 'comment-start) ";;")
                (set (make-local-variable 'comment-end) "\n")))

    (define-clojure-indent
      (as-> 0)
      (cond-> 0)
      (cond->> 0)
      (fact 0)
      (facts 0)
      (go-try 0)
      (GET 0)
      (POST 0)
      (go 0)
      (match 0))

    (add-hook 'cider-mode
              (lambda ()
                (setq xref-backend-functions '(cider--xref-backend))))

    (evil-collection-define-key 'normal 'cider--debug-mode-map
      "b" 'cider-debug-defun-at-point
      "n" 'evil-collection-cider-debug-next
      "c" 'evil-collection-cider-debug-continue
      "o" 'evil-collection-cider-debug-out
      "q" 'evil-collection-cider-debug-quit
      "e" 'evil-collection-cider-debug-eval
      "J" 'evil-collection-cider-debug-inject
      "I" 'evil-collection-cider-debug-inspect
      "L" 'evil-collection-cider-debug-locals
      "H" 'cider-debug-move-here)

    (evil-collection-define-key '(normal visual) 'cider-repl-mode-map
      (kbd "RET") 'cider-repl-return

      "gd" 'cider-find-var
      (kbd "C-t") 'cider-pop-back
      "gr" 'cider-refresh
      "gf" 'cider-find-resource
      "K" 'cider-doc)

    (evil-collection-define-key '(normal visual) 'cider-repl-history-mode-map
      (kbd "C-k") 'cider-repl-history-previous
      (kbd "C-j") 'cider-repl-history-forward
      "[" 'cider-repl-history-previous
      "]" 'cider-repl-history-forward

      (kbd "RET") 'cider-repl-history-insert-and-quit
      "gr" 'cider-repl-history-update
      "q" 'cider-repl-history-quit
      "u" 'cider-repl-history-undo-other-window)

    (evil-collection-define-key 'normal 'cider-test-report-mode-map
      (kbd "C-c ,") 'cider-test-commands-map
      (kbd "C-c C-t") 'cider-test-commands-map
      (kbd "M-p") 'cider-test-previous-result
      (kbd "M-n") 'cider-test-next-result
      (kbd "<backtab>") 'cider-test-previous-result
      (kbd "<tab>") 'cider-test-next-result
      (kbd "RET") 'cider-test-jump
      "t" 'cider-test-jump
      "d" 'cider-test-ediff
      "e" 'cider-test-stacktrace
      "f" 'cider-test-rerun-failed-tests
      "n" 'cider-test-run-ns-tests
      "L" 'cider-test-run-loaded-tests
      "p" 'cider-test-run-project-tests
      "gr" 'cider-test-run-test
      "q" 'cider-popup-buffer-quit-function)

    (evil-collection-define-key 'normal 'cider-macroexpansion-mode-map
      ;; quit
      "q" 'cider-popup-buffer-quit-function
      "r" 'cider-macroexpand-again
      "J" 'cider-javadoc
      "." 'cider-find-var
      "m" 'cider-macroexpand-1-inplace
      "a" 'cider-macroexpand-all-inplace
      "u" 'cider-macroexpand-undo
      [remap undo] 'cider-macroexpand-undo)

    (evil-collection-define-key 'normal 'cider-connections-buffer-mode-map
      "d" 'cider-connections-make-default
      "c" 'cider-connection-browser
      "x" 'cider-connections-close-connection
      (kbd "RET") 'cider-connections-goto-connection
      "g?" 'describe-mode)

    (evil-set-initial-state 'cider-stacktrace-mode 'normal)
    (evil-collection-define-key 'normal 'cider-stacktrace-mode-map
      (kbd "C-k") 'cider-stacktrace-previous-cause
      (kbd "C-j") 'cider-stacktrace-next-cause
      (kbd "[") 'cider-stacktrace-previous-cause
      (kbd "]") 'cider-stacktrace-next-cause
      (kbd "RET") 'cider-stacktrace-jump
      "q" 'cider-popup-buffer-quit-function
      "J" 'cider-stacktrace-toggle-java
      "C" 'cider-stacktrace-toggle-clj
      "R" 'cider-stacktrace-toggle-repl
      "T" 'cider-stacktrace-toggle-tooling
      "D" 'cider-stacktrace-toggle-duplicates
      "P" 'cider-stacktrace-show-only-project
      "A" 'cider-stacktrace-toggle-all
      "1" 'cider-stacktrace-cycle-cause-1
      "2" 'cider-stacktrace-cycle-cause-2
      "3" 'cider-stacktrace-cycle-cause-3
      "4" 'cider-stacktrace-cycle-cause-4
      "5" 'cider-stacktrace-cycle-cause-5
      (kbd "TAB") 'cider-stacktrace-cycle-current-cause
      [backtab] 'cider-stacktrace-cycle-all-causes)

    (add-hook 'cider-inspector-mode-hook #'evil-normalize-keymaps)

    (evil-collection-define-key 'normal 'cider-inspector-mode-map
      "q" 'quit-window
      (kbd "RET") 'cider-inspector-operate-on-point
      [mouse-1] 'cider-inspector-operate-on-click
      "L" 'cider-inspector-pop
      "gr" 'cider-inspector-refresh
      ;; Page-up/down
      (kbd "C-j") 'cider-inspector-next-page
      (kbd "C-k") 'cider-inspector-prev-page
      " " 'cider-inspector-next-page
      "s" 'cider-inspector-set-page-size
      (kbd "]") 'cider-inspector-next-inspectable-object
      (kbd "[") 'cider-inspector-previous-inspectable-object
      "gj" 'cider-inspector-next-inspectable-object
      "gk" 'cider-inspector-previous-inspectable-object)

    :general (local-leader-def+
               :major-modes 'cider-repl-mode
               :keymaps 'cider-mode-map
               "ca" 'toggle-nrepl-buffer
               "cq" 'cider-quit
               "sa" 'toggle-nrepl-buffer)

    (local-leader-def+
      :major-modes '(clojurescript-mode clojurec-mode clojure-mode)
      :keymaps 'clojure-mode-map
      ;; init, quit, manage repl
      "cjj" 'cider-jack-in-clj
      "cjs" 'cider-jack-in-cljs
      "ccj" 'cider-connect-clj
      "ccs" 'cider-connect-cljs
      "cq" 'cider-quit
      "cr" 'cider-restart
      "ca" 'toggle-nrepl-buffer
      "sa" 'toggle-nrepl-buffer
      "co" 'cider-repl-switch-to-other
      "so" 'cider-repl-switch-to-other
      ;; manage sesman
      "sb" 'sesman-browser
      "si" 'sesman-info
      "sg" 'sesman-goto
      "slu" 'sesman-unlink
      "sq" 'sesman-quit
      "sr" 'sesman-restart
      "sSj" 'cider-connect-sibling-clj
      "sSs" 'cider-connect-sibling-cljs
      "ss" 'sesman-start
      "sL" 'cider-find-and-clear-repl-output
      ;; namespaces
      "ns" 'cider-repl-set-ns
      "nr" 'cider-ns-refresh
      "nl" 'cider-ns-reload
      "na" 'cider-ns-reload-all
      "ne" 'cider-eval-ns-form
      ;; eval
      "ee" 'cider-eval-last-sexp
      "eb" 'cider-eval-buffer
      "ev" 'cider-eval-region
      "ed" 'cider-eval-defun-at-point
      "er" 'cider-eval-last-sexp-and-replace
      "ef" 'cider-eval-sexp-at-point
      "ep" 'cider-pprint-eval-last-sexp
      "em" 'cider-macroexpand-1
      "eM" 'cider-macroexpand-all
      "ei" 'cider-interrupt
      "eu" 'cider-undef
      ;; help
      "ha" 'cider-apropos
      "hc" 'cider-cheatsheet
      "hd" 'cider-clojuredocs
      "hj" 'cider-javadoc
      "hn" 'cider-browse-ns
      "hN" 'cider-browse-ns-all
      "hs" 'cider-browse-spec
      "hS" 'cider-browse-spec-all
      ;; format code style
      "==" 'cider-format-buffer
      "=eb" 'cider-format-edn-buffer
      "=ee" 'cider-format-edn-last-sexp
      "=er" 'cider-format-edn-region
      "=f" 'cider-format-defun
      ;; goto
      "gb" 'cider-pop-back
      "gc" 'cider-classpath
      "gn" 'cider-find-ns
      ;; toggle options
      "Te" 'cider-enlighten-mode
      "Tt" 'cider-auto-test-mode
      ;; cider-tests
      "tt" 'cider-test-run-focused-test+
      "tn" 'cider-test-run-ns-tests+
      "ta" 'cider-test-run-project-tests+
      "tl" 'cider-test-run-loaded-tests+
      "tf" 'cider-test-rerun-failed-tests+
      "tr" 'cider-test-show-report
      ;; cider-debug and inspect
      "df" 'cider-debug-defun-at-point
      "dve" 'cider-inspect-last-sexp
      "dvf" 'cider-inspect-defun-at-point
      "dvi" 'cider-inspect
      "dvl" 'cider-inspect-last-result
      "dvv" 'cider-inspect-expr
      ;; profile
      "pp" 'cider-profile-samples
      "pc" 'cider-profile-clear
      "pn" 'cider-profile-ns-toggle
      "ps" 'cider-profile-var-summary
      "pS" 'cider-profile-summary
      "pt" 'cider-profile-toggle
      "pv" 'cider-profile-var-profiled-p)
    )



  (use-package cider
    :straight t
    :preface

    (defun cider-test-run-focused-test+ ()
      "Run test around point."
      (interactive)
      (cider-load-buffer)
      (cider-test-run-test))

    (defun cider-test-run-ns-tests+ ()
      "Run namespace test."
      (interactive)
      (cider-load-buffer)
      (call-interactively #'cider-test-run-ns-tests))

    (defun cider-test-run-loaded-tests+ ()
      "Run loaded tests."
      (interactive)
      (cider-load-buffer)
      (call-interactively #'cider-test-run-loaded-tests))

    (defun cider-test-run-project-tests+ ()
      "Run project tests."
      (interactive)
      (cider-load-buffer)
      (call-interactively #'cider-test-run-project-tests))

    (defun cider-test-rerun-failed-tests+ ()
      "Rerun failed tests."
      (interactive)
      (cider-load-buffer)
      (cider-test-rerun-failed-tests))

    :config
    (progn
      (setq nrepl-hide-special-buffers t
            cider-popup-stacktraces-in-repl t
            cider-repl-history-file "~/.emacs.d/nrepl-history"
            cider-repl-pop-to-buffer-on-connect nil
            cider-auto-select-error-buffer nil
            cider-prompt-save-file-on-load nil
            cider-repl-display-help-banner nil
            cider-repl-use-pretty-printing t
            cider-prompt-for-symbol nil
            )))

  (use-package helm-cider :config (helm-cider-mode 1))
  #+END_SRC

*** Org Mode
Remove annoying babel warnings and make the bullets pretty.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-confirm-babel-evaluate (lambda (l b) nil)
          org-link-shell-confirm-function (lambda (l b) nil)
          org-link-elisp-confirm-function (lambda (l b) nil))
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode))

    :general
    (local-leader-def+
      :major-modes 'org-mode
      :keymaps 'org-mode-map
      "TAB" 'org-ctrl-c-tab
      ))

  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC


* Key binds

*** Global binds in states
#+BEGIN_SRC emacs-lisp

  (defun save-eval+ ()
    (interactive)
    (call-interactively 'evil-write)
    (pcase major-mode
      ('clojure-mode (cider-eval-buffer))
      ('clojurescript-mode (cider-eval-buffer))
      ('clojurec-mode (cider-eval-buffer))
      (_ (ignore nil))))

  (defun auto-eval+ ()
    (interactive)
    (pcase major-mode
      ('org-mode (call-interactively #'org-babel-execute-src-block))
      ('clojure-mode (cider-eval-last-sexp))
      ('clojurescript-mode (cider-eval-last-sexp))
      ('clojurec-mode (cider-eval-last-sexp))
      (_ (eval-last-sexp nil))))

  (general-define-key
   :states 'normal
   " " 'auto-eval+
   "A-<return>" 'evil-write+
   "gr" 'lsp-find-references
   "gi" 'lsp-find-implementation
   "RET" 'save-eval+
   "M-q" 'save-buffers-kill-terminal
   )
      #+END_SRC

*** Global leader
#+BEGIN_SRC emacs-lisp
  (leader-def+
    "SPC"  'helm-M-x
    "TAB" '(switch-to-last-buffer+ :wk "last-buffer")
    "<escape>" 'neotree-toggle
    "DEL"      'abort-recursive-edit

    "." 'repeat-complex-command
    "!" 'shell-command
    "'" 'eshell
    "&" 'async-shell-command
    "u" 'universal-argument
    "c" 'uncomment-region

    "g" '(:ignore t :wk "git")
    "p" '(:ignore t :wk "project")
    "s" '(:ignore t :wk "searching")
    )

#+END_SRC

#+RESULTS:

*** Windows
#+BEGIN_SRC emacs-lisp
(leader-submenu-def+ "window" "w"
    "h" 'evil-window-left
    "j" 'evil-window-down
    "k" 'evil-window-up
    "l" 'evil-window-right
    "c" 'evil-window-new
    "n" 'evil-window-new
    "q" 'evil-quit
    "d" 'kill-buffer-and-window
    "DEL" 'evil-quit
    )

#+END_SRC

*** Buffers
#+BEGIN_SRC emacs-lisp
  (leader-submenu-def+ "buffer" "b"
      "l" 'buffer-menu
      "b"  'helm-mini
      "n" 'next-buffer
      "p" 'previous-buffer
      "r" 'rename-buffer
      "R" 'rename-uniquely
      "o" 'occur
      "DEL" 'bury-buffer
      "d" 'kill-this-buffer-and-window
      "q" 'kill-buffer
      "m" '(switch-to-messages-buffer+ :wk "switch-to-messages")
  )
#+END_SRC

*** Bookmarks
#+BEGIN_SRC emacs-lisp
  (leader-submenu-def+ "bookmarks" "a"
    "c" 'bookmark-set
    "m" 'bookmark-jump
    "l" 'bookmark-bmenu-list
    )
#+END_SRC
*** Errors


#+BEGIN_SRC emacs-lisp
  (leader-submenu-def+ "errors" "e"
    "l" 'flycheck-list-errors
    "n" 'flycheck-next-error
    "p" 'flycheck-previous-error)
#+END_SRC

*** Toggles
#+BEGIN_SRC emacs-lisp
  (leader-submenu-def+ "toggles" "t"
   "r" 'global-auto-revert-mode
   "c" 'evil-cleverparens-mode
   "i" 'aggressive-indent-mode
   "p" 'paredit-mode)

#+END_SRC

*** Make
#+BEGIN_SRC emacs-lisp
    (leader-submenu-def+ "make" "RET"
        "f" 'makefile-executor-goto-makefile
        "RET" 'makefile-executor-execute-project-target
        "." 'makefile-executor-execute-last
        "SPC" 'makefile-executor-execute-last)
#+END_SRC
