" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" General Override of Defaults
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set exrc
set secure
set wildmenu
set ttyfast

" Show the title, ruler, status, mode, and absolute line numbers
set showmode
set showcmd
set scrolloff=3
set laststatus=2
set title
set ruler
set relativenumber
set number
set hidden

set statusline=%t%y-%{fugitive#statusline()}%m

" This is what files look like
set encoding=utf8
set ffs=unix,dos,mac
set wildignore=*.pyc,*.pyo,*.o,*.so,*.out,*.git,*.hg,*.svn,*.exe,*.zip,*.tar,.tox

" From whence you came, you shall remain, until you set, the path again
set path=$PWD/**

" Tab sanity
set autoindent
set expandtab
set smarttab
set tabstop=4
set shiftwidth=4
set backspace+=start,eol,indent

" Show hidden characters, tabs, trailing whitespace
set list
set listchars=tab:→\ ,trail:·,nbsp:·

" Alas Master Wq, Master Git's wushu is greater
" (I don't really need this backup or swapfile stuff thanks to DVC)
set autoread
set nobackup
set nowritebackup
set nowb
set noswapfile

" Keep lots of history/undo
set history=1000
set undolevels=1000

" enable mouse, mainly for NERDTree
set mouse=a

" Use filetype in lieu of compatible if available
if has("autocmd")
    filetype on
    filetype indent on
    filetype plugin on
    set nocompatible
endif

" Syntax highlighting
syntax enable

" Enable folding but leave it unfolded by default
set foldmethod=indent
set foldlevel=30
" Fold commands
" zR    open all folds
" zM    close all folds
" za    toggle fold at cursor position
" zj    move down to start of next fold
" zk    move up to end of previous fold

" Highlight red for trailing white space
highlight WarnHighlight ctermbg=red guibg=red
highlight ColorColumn ctermbg=black guibg=black
highlight ColorColumn ctermbg=black guibg=black

autocmd BufWinEnter * match WarnHighlight /\s\+$/
autocmd InsertEnter * match WarnHighlight /\s\+\%#\@<!$/
autocmd InsertLeave * match WarnHighlight /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Make the background dark and the foreground colorful
set bg=dark
set t_Co=256

" Highlight search, show the matches as the search term is typed, and
" highlight matching punctuation
set hlsearch
set incsearch
set mat=2
set showmatch
set ignorecase
set smartcase

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let vimDir = '$HOME/.vim'
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

" Use system clipboard as default register for yank/paste
set clipboard^=unnamed  " use the clipboards of vim and win
set go+=a               " Visual selection automatically copied to the clipboard


" Omnicompletion improvements
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" improve omnicomplete popup nav
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Key Mappings
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" Pretend arrow keys don't exist - (No cheating!)
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>

" Put escape on the home row
inoremap jk <esc>
inoremap kj <esc>

" Don't skip wrapped lines when navigating
nnoremap j gj
nnoremap k gk

" Shortcuts
set pastetoggle=<F2>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" sudo to write
cmap w!! w !sudo tee % >/dev/null

" Make enter save
nnoremap <CR> :w! <CR>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Leader Configuration
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" Define leader key
let mapleader = " "
let maplocalleader = ","

" Define leader commands:

" See list of mappings
nnoremap <leader>? :map<cr>

" Clear highlight and redraw
nnoremap <s-c-l> :nohl<cr><c-l>

" Leaders for custom functions
nnoremap <leader>w :call StripTrailingWhitespaces()<cr>
nnoremap <leader>c :call ToggleColorColumn()<cr>
nnoremap <leader>F :call ToggleFold()<cr>

" Leaders for custom shortcuts
nnoremap <leader>f za

" Leaders for vim-dispatch
nnoremap <leader>m :Make!<cr>
nnoremap <leader>M :Make<cr>
nnoremap <leader>d :Dispatch!<cr>
nnoremap <leader>D :Dispatch<cr>
nnoremap <leader>o :Copen<cr>

" Leaders for ctags
nnoremap <leader>g :TagsGenerate!<cr>
nnoremap <leader>j :tjump<space>

" Lusty Explorer bindings
nnoremap <leader>e :LustyFilesystemExplorer<cr>
nnoremap <leader>eh :LustyFilesystemExplorerFromHere<cr>
nnoremap <leader>b :LustyBufferExplorer<cr>
nnoremap <leader>/ :LustyBufferGrep<cr>

" Gundo binding
nnoremap <leader>u :GundoToggle<CR>

" Ack.vim bindings
nnoremap <leader>a :tab split<CR>:Ack ""<Left>
nnoremap <leader>* :tab split<CR>:Ack <C-r><C-w><CR>

" NERDTree bindings
map <C-n> :NERDTreeToggle<CR>

" Misc leaders for save/load/sourcing
nnoremap <leader>i :BundleInstall<cr>
nnoremap <leader>s :exe "mksession! ~/.vim/.sessions/latest.vim"<cr>:exe "mksession! .session.vim"<cr>:w!<cr>
nnoremap <leader>l :exe "source .session.vim"<cr>
nnoremap <leader>L :exe "source ~/.vim/.sessions/latest.vim"<cr>
nnoremap <leader>r :Make!<cr>:source ~/.vimrc<cr>
nnoremap <leader>R :Make!<cr>:source ~/.vimrc<cr>:BundleInstall<cr>:q<cr>
nnoremap <leader>q :bufdo q<cr>

" For vimdiff
if &diff
    map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
    map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
    map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>
    set statusline=%-10.3n  "buffer number
endif

" Make enter save. For clojure, live-reload associated process
nnoremap <NL> :w!<CR>:Require<CR>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Plugin Installation
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" Set up Vundle on first install - Vundle, in turn, installs all other plugins
    let iCanHazVundle=1
    let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
    if !filereadable(vundle_readme)
        echo "Installing Vundle.."
        echo ""
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
        let iCanHazVundle=0
    endif
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
    " List bundles here
    " ~~~~~~~~~~~~~~~~~

    " General
    Plugin 'gmarik/vundle'
    Plugin 'tpope/vim-repeat'
    Plugin 'tpope/vim-surround'
    Plugin 'tpope/vim-unimpaired'
    Plugin 'Valloric/YouCompleteMe'
    Plugin 'scrooloose/syntastic'
    Plugin 'sjbach/lusty'
    Plugin 'mileszs/ack.vim'
    Plugin 'szw/vim-tags'
    Plugin 'tpope/vim-dispatch'
    Plugin 'calebsmith/vim-lambdify'
    Plugin 'godlygeek/tabular'
    Plugin 'plasticboy/vim-markdown'
    Plugin 'reedes/vim-pencil'
    Plugin 'benmills/vimux'
    Plugin 'scrooloose/nerdtree'
    Plugin 'tpope/vim-fugitive'
    Plugin 'sjl/gundo.vim'
    " Python
    Plugin 'pfdevilliers/Pretty-Vim-Python'
    " JavaScript
    Plugin 'pangloss/vim-javascript'
    " Lisps
    Plugin 'spinningarrow/vim-niji'
    Plugin 'guns/vim-sexp'
    Plugin 'tpope/vim-sexp-mappings-for-regular-people'
    " Clojure
    Plugin 'guns/vim-clojure-static'
    Plugin 'tpope/vim-leiningen'
    Plugin 'tpope/vim-projectionist'
    Plugin 'tpope/vim-fireplace'

    if iCanHazVundle == 0
        echo "Installing Bundles, please ignore key map error messages"
        echo ""
        :BundleInstall
    endif
" end of vundle setup

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Plugin Configuration
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" Syntastic Configuration
let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_python_checkers = ['pyflakes', 'flake8']
let g:syntastic_c_checkers = ['splint']
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_sh_checkers = ['shellcheck']

" YCM Configuration
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_filetype_blacklist = {'clojure': 1}

" vim-tags Configuration
let g:vim_tags_use_ycm = 1
let g:vim_tags_use_vim_dispatch = 1

" Dispatch Configuration
autocmd FileType erlang let b:dispatch = 'erl -make'

" NERDTree Configuration
let NERDTreeRespectWildIgnore=1
let NERDTreeShowHidden=1
" Open on start if no file chosen
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('mkd', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('sh', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('less', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('py', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('scm', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('rkt', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('clj', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('erl', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('cpp', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('h', 'cyan', 'none', '#00ff00', '#151515')
call NERDTreeHighlightFile('hpp', 'cyan', 'none', '#00ff00', '#151515')

" Python Mode Config
" -------------------
" Disable rope - use YCM
let g:pymode_rope = 0
"Disable Linting - use syntastic
let g:pymode_lint = 0
" Support virtualenv
let g:pymode_virtualenv = 1
" Disable set breakpoints
let g:pymode_breakpoint = 0
" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all
" Don't autofold code
let g:pymode_folding = 0

" Vimux Configuration
" -------------------
" Prompt for a command to run
nnoremap <Leader>vp :VimuxPromptCommand<CR>
" Run last command executed by RunVimTmuxCommand
nnoremap <Leader>vl :call _RunLast()<CR>
" Close all other tmux panes in current window
nnoremap <Leader>vq :VimuxCloseRunner<CR>
" Interrupt any command running in the runner pane
nnoremap <Leader>vi :VimuxInterruptRunner<CR>

vnoremap <Leader><Space> "ry :call VimuxSendText(@r)<CR>:call VimuxSendKeys("Enter")<CR>
nnoremap <Leader><Space> vip"ry :call VimuxSendText(@r)<CR>:call VimuxSendKeys("Enter")<CR>
nnoremap <LocalLeader><Space> ggVG"ry :call VimuxSendText(@r)<CR>:call VimuxSendKeys("Enter")<CR>''


" LiteDFM Configuration
let g:lite_dfm_normal_bg_cterm = 234
let g:lite_dfm_left_offset = 15

" vim clojure
let g:vimclojure#HighlightBuiltins = 1
let g:vimclojure#ParenRainbow = 1

let g:sexp_enable_insert_mode_mappings = 0

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Custom Functions
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" Whitespace
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" A function to strip trailing whitespace and clean up afterwards so
" that the search history remains intact and cursor does not move.
" Taken from: http://vimcasts.org/episodes/tidying-whitespace
" Taken in turn from: https://github.com/nrb/dotfiles/blob/master/.vimrc
function! StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Folding
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" A function to quickly toggle folding and unfolding everything
function! ToggleFold()
    if !exists("g:code_is_folded")
        let g:code_is_folded = 0
    endif
    if g:code_is_folded == 1
        set foldlevel=30
        let g:code_is_folded = 0
    else
        set foldlevel=0
        let g:code_is_folded = 1
    endif
endfunction

" Color Column
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" A function to toggle colorcolumn on and off
function! ToggleColorColumn()
    if g:show_column_toggle == 1
        set colorcolumn=0
        let g:show_column_toggle = 0
    else
        set colorcolumn=80,110
        let g:show_column_toggle = 1
    endif
endfunction
if !exists("g:show_column_toggle")
    let g:show_column_toggle = 0
    call ToggleColorColumn()
endif


" Set Lisp indentation using racket script
autocmd filetype lisp,scheme,art setlocal equalprg=scmindent.rkt

" Omnicomplete tab wrapper for clojure where YCM is disabled

function! InsertTabWrapper()
  if pumvisible()
    return "\<c-n>"
  endif
  if strpart(getline('.'), 0, col('.') - 1) =~ '.*(\S*$'
    return "\<c-x>\<c-o>"
  else
    return "\<tab>"
  endif
endfunction

inoremap <expr><s-tab> pumvisible()?"\<c-p>":"\<c-d>"
autocmd FileType clojure :autocmd VimEnter * inoremap <expr><tab> InsertTabWrapper()
autocmd FileType clojure :autocmd BufEnter * inoremap <expr><tab> InsertTabWrapper()
